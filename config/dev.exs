use Mix.Config

config :nfd, Nfd.SwooshMailer,
  adapter: Swoosh.Adapters.Local

# config :b2_client, :backend, B2Client.Backend.Memory

config :stripity_stripe, 
  api_key: System.get_env("STRIPE_API_TEST_KEY_SECRET"),
  json_library: Jason

config :pay_pal,
  client_id: System.get_env("PAYPAL_API_TEST_KEY"),
  client_secret: System.get_env("PAYPAL_API_TEST_SECRET"),
  environment: :sandbox

config :recaptcha,
  public_key: System.get_env("GOOGLE_RECAPTCHA_CLIENT"),
  secret: System.get_env("GOOGLE_RECAPTCHA_SECRET")

config :nfd, :pow_assent,
  providers:
       [
        # facebook: [
        #   client_id: "REPLACE_WITH_CLIENT_ID",
        #   client_secret: "REPLACE_WITH_CLIENT_SECRET",
        #   strategy: PowAssent.Strategy.Facebook
        # ],
        google: [
          client_id: System.get_env("GOOGLE_CLIENT_ID"),
          client_secret: System.get_env("GOOGLE_CLIENT_SECRET"),
          strategy: PowAssent.Strategy.Google
        ],
        discord: [
          client_id: System.get_env("DISCORD_API_KEY"),
          client_secret: System.get_env("DISCORD_API_KEY_SECRET"),
          strategy: PowAssent.Strategy.Discord
        ]
      ]


# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configurration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :nfd, NfdWeb.Endpoint,
  http: [port: 4000],
  url: [host: "localhost"], # port: 80
  debug_errors: false, # by setting this to false, it will show what errors will look like in production, not dev.
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../assets", __DIR__)
    ],
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :nfd, NfdWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/nfd_web/views/.*(ex)$},
      ~r{lib/nfd_web/templates/.*(eex)$}
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Configure your database
config :nfd, Nfd.Repo,
  username: "postgres",
  password: "postgres",
  database: "nfd_dev",
  hostname: "localhost",
  pool_size: 10


# import_config "dev.secret.exs"
